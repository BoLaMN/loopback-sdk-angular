'use strict';

var urlBase = <%-: urlBase | q %>;

/**
 * @ngdoc overview
 * @name <%- moduleName %>
 * @module
 * @description
 *
 * The `<%- moduleName %>` module provides services for interacting with
 * the models exposed by the LoopBack server via the REST API.
 *
 */
var module = angular.module(<%-: moduleName | q %>, ['ngResource']);

<% for (var modelName in models) {
     var meta = models[modelName];

     // capitalize the model name
     modelName = modelName[0].toUpperCase() + modelName.slice(1);
-%>
/**
 * @ngdoc object
 * @name lbServices.<%-: modelName %>
 * @object
 *
 * @description
 *
 * A $resource object for interacting with the `<%-: modelName %>` model.
 *
 * ## Example
 *
 * See
 * {@link http://docs.angularjs.org/api/ngResource.$resource#example $resource}
 * for an example of using this object.
 *
<% /*
    * TODO(bajtos) provide an example of performing basic CrUD operations,
    * including filter/where find query
    */ -%>
 */
module.factory(
  <%-: modelName | q %>,
  ['LoopBackResource', 'LoopBackAuth', function(Resource, LoopBackAuth) {
    return Resource(
      urlBase + <%-: meta.ctor.getFullPath() | q %>,
<% /*
        Constructor arguments are hardcoded for now.
        We should generate it from sharedCtor.accepts instead.
*/ -%>
      { 'id': '@id' },
      {
<% meta.methods.forEach(function(action) {
     var methodName = action.name.split('.').join('$');
-%>
        /**
         * @ngdoc method
         * @name lbServices.<%- modelName %>#<%- methodName %>
         * @methodOf lbServices.<%- modelName %>
         *
         * @description
         *
<% if (!action.description) {
action.description =  '<em>\n' +
  '(The remote method definition does not provide any description.)\n' +
  '</em>';
} -%>
         * <%-: action.description | replace:/\n/g, '\n         * ' %>
         *
         * @param {Object=} parameters Request parameters.
<% if (action.getHttpMethod() == 'POST' || action.getHttpMethod() == 'PUT') { -%>
         *
         * @param {Object} postData Request data.
<% } -%>
<% if (!action.accepts || action.accepts.length == 0) { -%>
         * This method does not accept any parameters. Supply an empty object.
<% } else if (action.acceptsSingleBodyArgument(action.accepts)) { -%>
         * This method expects a subset of model properties as request parameters.
<% } else { -%>
         *
         * Object properties:
<%   action.accepts.forEach(function(arg) { -%>
         *
         * - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
   }
-%>
         *
<% var returnType = action.isReturningArray() ? 'Array.<Object>': 'Object'; %>
         * @param {Function(<%- returnType %>, Object)=} successCb
         *    Success callback with two arguments: `value`, `responseHeaders`.
         *
         * @param {Function(Object)=} errorCb Error callback with one argument:
         *    `httpResponse`.
         *
         * @return {<%- returnType %>} An empty reference that will be
         *   populated with the actual data once the response is returned
         *   from the server.
<% if (!action.returns || action.returns.length == 0) { -%>
         * This method returns no data.
<% } else if (!action.returns[0].root) { -%>
         *
         * Data properties:
<%   action.returns.forEach(function(arg) { -%>
         *
         * - `<%- arg.arg %>` – `{<%- getJsDocType(arg)  %>}` - <%-
(arg.description || '').replace(/\n/g, '\n         *   ') %>
<%   });
   }
-%>
         */
        <%-: methodName | q %>: {
          url: urlBase + <%-: action.getFullPath() | q %>,
          method: <%-: action.getHttpMethod() | q %>,
<% if (action.isReturningArray()) { -%>
          isArray: true,
<% } -%>
<% if (modelName === 'User' && methodName === 'login') { -%>
          interceptor: {
            response: function(response) {
              var accessToken = response.data;
              LoopBackAuth.accessTokenId = accessToken.id;
              return response.resource;
            }
          }
<% } else if (modelName === 'User' && methodName === 'logout') { -%>
          interceptor: {
            response: function(response) {
              LoopBackAuth.accessTokenId = null;
              return response.resource;
            }
          }
<% } -%>

        },
<% }); // meta.methods.foreach -%>
      }
    );
  }]);

<% } // for modelName in models -%>

module
  .factory('LoopBackAuth', function() {
    return {
      accessTokenId: null
    };
  })
  .config(function($httpProvider) {
    $httpProvider.interceptors.push('LoopBackAuthRequestInterceptor');
  })
  .factory('LoopBackAuthRequestInterceptor', [ '$q', 'LoopBackAuth',
    function($q, LoopBackAuth) {
      return {
        'request': function(config) {
          if (LoopBackAuth.accessTokenId) {
            config.headers.authorization = LoopBackAuth.accessTokenId;
          }
          return config || $q.when(config);
        }
      }
    }])
  .factory('LoopBackResource', [ '$resource', function($resource) {
    return function(url, params, actions) {
      var resource = $resource(url, params, actions);

      // Angular always calls POST on $save()
      // This hack is based on
      // http://kirkbushell.me/angular-js-using-ng-resource-in-a-more-restful-manner/
      resource.prototype.$save = function(success, error) {
        // Fortunately, LoopBack provides a convenient `upsert` method
        // that exactly fits our needs.
        var result = resource.upsert.call(this, {}, this, success, error);
        return result.$promise || result;
      }

      return resource;
    };
  }]);
<%
function getJsDocType(arg) {
  var type = arg.type == 'any' ? '*' : arg.type;
  if (!arg.required) type += '=';
  return type;
}
-%>
